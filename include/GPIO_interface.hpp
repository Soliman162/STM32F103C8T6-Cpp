#ifndef INTERFACE_H
#define INTERFACE_H

#include "STD_TYPES.hpp"

/*Pin_Value*/
enum  PIN_VALUE : u8
{
	GPIO_LOW  =0,
	GPIO_HIGH =1
};

enum class PIN_MODE : u8
{
	/*MAX_SPEED_10MHZ*/
	 GENERAL_PURPOSE_OUTPUT_PUSH_PULL_10MHZ     =0b0001,
	 GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN_10MHZ    =0b0101,
	 ALTERNATE_FUNCTION_PUSH_PULL_OUTPUT_10MHZ  =0b1001,
	 ALTERNATE_FUNCTION_OPEN_DRAIN_OUTPUT_10MHZ =0b1101,

	/*MAX_SPEED_2MHZ*/
	GENERAL_PURPOSE_OUTPUT_PUSH_PULL_2MHZ     =0b0010,
	GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN_2MHZ    =0b0110,
	ALTERNATE_FUNCTION_PUSH_PULL_OUTPUT_2MHZ  =0b1010,
	ALTERNATE_FUNCTION_OPEN_DRAIN_OUTPUT_2MHZ =0b1110,

	/*MAX_SPEED_50MHZ*/
	GENERAL_PURPOSE_OUTPUT_PUSH_PULL_50MHZ    =0b0011,
	GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN_50MHZ   =0b0111,
	ALTERNATE_FUNCTION_PUSH_PULL_OUTPUT_50MHZ =0b1011,
	ALTERNATE_FUNCTION_OPEN_DRAIN_OUTPUT_50MHZ=0b1111,

	/*INPUT*/
	INPUT_ANALOG    = 0b0000,
	INPUT_FLOATING  = 0b0100,
	INPUT_PULL_DOWN = 0b1000,
	INPUT_PULL_UP   = 0b1000
};

class GPIO_CONFIG_t : public GPIO_Pin
{
	private :
    PIN_MODE   Pin_Mode;
	public :
		
		GPIO_CONFIG_t(PORT Copy_enumPortID, PIN Copy_enumPin, PIN_MODE Copy_Pin_Mode);
	
	  void SET_voidPin_Mode(void);
		void SET_voidPin_Mode(PORT Copy_enumPortID, PIN Copy_enumPin, PIN_MODE Copy_Pin_Mode);
	
		void GPIO_voidSETPinValue( PIN_VALUE Pin_u8Value );
		void GPIO_voidSETPinValue( PORT Copy_enumPortID, PIN Copy_enumPin,PIN_VALUE Pin_u8Value );
	
		PIN_VALUE GPIO_enumGETPinValue(void);
	
};


#endif
